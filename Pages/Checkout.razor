@page "/checkout"
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    <EditForm Model="_Order.DeliveryAddress" OnValidSubmit="PlaceOrder" OnInvalidSubmit="ShowError"> 
        <div class="checkout-cols">

            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="_Order"/>
            </div>
            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                @if (_isError)
                {
                    <div class="alert alert-danger">Please enter a name and address.</div>
                }
                <AddressEditor Address="_Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" disabled=@_isSubmitting>
            Place order
        </button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    Order _Order => OrderState.Order;
    bool _isSubmitting;

    bool _isError;

    private async Task PlaceOrder()
    {
        _isError = false;
        _isSubmitting = true;
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", OrderState.Order);
        var newOrderId= await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    } 

    private void ShowError()
    {
        _isError = true;
    }
}